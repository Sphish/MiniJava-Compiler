package visitor;

//
// Generated by JTB 1.3.2
//

import symbol.FlowBlock;
import symbol.FlowGraph;
import syntaxtree.*;

import java.util.Enumeration;
import java.util.HashMap;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class BuildFlowGraph2Visitor extends GJNoArguDepthFirst<String> {
	private HashMap<String, FlowGraph> flowGraphMap;
	private int currentNo;
	private HashMap<String, Integer> currentLabelMap;
	private FlowGraph currentFlowGraph;
	private boolean calling = false;

	public BuildFlowGraph2Visitor(HashMap<String, FlowGraph> fgm) {
		flowGraphMap = fgm;
	}

	public String visit(Goal n) {
		currentFlowGraph = flowGraphMap.get("MAIN");
		currentLabelMap = currentFlowGraph.mLabel;
		currentNo = 0;
		currentFlowGraph.addEdge(currentNo, currentNo + 1);
		currentNo++;
		n.f1.accept(this);
		n.f3.accept(this);
		return null;
	}

	public String visit(Procedure n) {
		currentNo = 0;
		currentFlowGraph = flowGraphMap.get(n.f0.accept(this));
		currentLabelMap = currentFlowGraph.mLabel;
		currentFlowGraph.addEdge(currentNo, currentNo + 1);
		currentNo++;
		n.f2.accept(this);
		n.f4.accept(this);
		return null;
	}

	public String visit(Stmt n) {
		n.f0.accept(this);
		currentNo++;
		return null;
	}

	public String visit(NoOpStmt n) {
		currentFlowGraph.addEdge(currentNo, currentNo + 1);
		n.f0.accept(this);
		return null;
	}

	public String visit(ErrorStmt n) {
		currentFlowGraph.addEdge(currentNo, currentNo + 1);
		n.f0.accept(this);
		return null;
	}

	public String visit(CJumpStmt n) {
		FlowBlock flowBlock;
		currentFlowGraph.addEdge(currentNo, currentNo + 1);
		flowBlock = currentFlowGraph.getBlock(currentNo);
		String l;
		n.f0.accept(this);
		flowBlock.right.add(Integer.valueOf(n.f1.accept(this)));
		l = n.f2.accept(this);
		currentFlowGraph.addEdge(currentNo, currentLabelMap.get(l));
		return null;
	}

	public String visit(JumpStmt n) {
		String l;
		n.f0.accept(this);
		l = n.f1.accept(this);
		currentFlowGraph.addEdge(currentNo, currentLabelMap.get(l));
		return null;
	}

	public String visit(HStoreStmt n) {
		FlowBlock flowBlock;
		currentFlowGraph.addEdge(currentNo, currentNo + 1);
		flowBlock = currentFlowGraph.getBlock(currentNo);
		flowBlock.right.add(Integer.valueOf(n.f1.accept(this)));
		n.f2.accept(this);
		flowBlock.right.add(Integer.valueOf(n.f3.accept(this)));
		return null;
	}

	public String visit(HLoadStmt n) {
		FlowBlock flowBlock;
		currentFlowGraph.addEdge(currentNo, currentNo + 1);
		flowBlock = currentFlowGraph.getBlock(currentNo);
		flowBlock.left.add(Integer.valueOf(n.f1.accept(this)));
		flowBlock.right.add(Integer.valueOf(n.f2.accept(this)));
		n.f3.accept(this);
		return null;
	}

	public String visit(MoveStmt n) {
		FlowBlock flowBlock;
		currentFlowGraph.addEdge(currentNo, currentNo + 1);
		flowBlock = currentFlowGraph.getBlock(currentNo);
		flowBlock.left.add(Integer.valueOf(n.f1.accept(this)));
		n.f2.accept(this);
		return null;
	}

	public String visit(PrintStmt n) {
		currentFlowGraph.addEdge(currentNo, currentNo + 1);
		n.f0.accept(this);
		n.f1.accept(this);
		return null;
	}

	public String visit(StmtExp n) {
		n.f1.accept(this);
		n.f3.accept(this);
		currentFlowGraph.addEdge(currentNo, currentNo + 1);
		return null;
	}

	public String visit(Call n) {
		n.f1.accept(this);
		calling = true;
		n.f3.accept(this);
		calling = false;
		return null;
	}

	public String visit(BinOp n) {
		FlowBlock flowBlock;
		flowBlock = currentFlowGraph.getBlock(currentNo);
		n.f0.accept(this);
		flowBlock.right.add(Integer.valueOf(n.f1.accept(this)));
		n.f2.accept(this);
		return null;
	}

	public String visit(SimpleExp n) {
		String tmp = n.f0.accept(this);
		if (n.f0.which == 0) {
			// is Temp
			FlowBlock flowBlock = currentFlowGraph.getBlock(currentNo);
			flowBlock.right.add(Integer.valueOf(tmp));
		}
		return null;
	}

	public String visit(Temp n) {
		n.f0.accept(this);
		String _ret = n.f1.accept(this);
		if (calling) {
			FlowBlock flowBlock = currentFlowGraph.getBlock(currentNo);
			flowBlock.right.add(Integer.valueOf(_ret));
		}
		return _ret;
	}

	public String visit(IntegerLiteral n) {
		String _ret = n.f0.toString();
		n.f0.accept(this);
		return _ret;
	}

	public String visit(Label n) {
		String _ret = n.f0.toString();
		n.f0.accept(this);
		return _ret;
	}
}